name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask
          pip install Werkzeug

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install flask
          pip install Werkzeug
          pip install pytest-flask

      - name: Run Tests
        run: |
          pytest --tb=short -v <<EOF
          - test: Register a new user
            method: POST
            endpoint: /register
            data:
              username: testuser
              password: testpassword
            expected_status_code: 302
            expected_redirect: /

          - test: Login with valid credentials
            method: POST
            endpoint: /login
            data:
              username: testuser
              password: testpassword
            expected_status_code: 302
            expected_redirect: /

          - test: Login with invalid credentials
            method: POST
            endpoint: /login
            data:
              username: testuser
              password: wrongpassword
            expected_status_code: 200
            expected_response_contains: Login

          - test: Add a new task
            setup:
              - method: POST
                endpoint: /login
                data:
                  username: testuser
                  password: testpassword
            method: POST
            endpoint: /add
            data:
              task: New Task
            expected_status_code: 302
            expected_redirect: /

          - test: Mark a task as completed
            setup:
              - method: POST
                endpoint: /add
                data:
                  task: New Task
            method: POST
            endpoint: /complete/0
            expected_status_code: 302
            expected_redirect: /

          - test: Delete an ongoing task
            setup:
              - method: POST
                endpoint: /add
                data:
                  task: New Task
            method: POST
            endpoint: /delete/0
            expected_status_code: 302
            expected_redirect: /

          - test: Delete a completed task
            setup:
              - method: POST
                endpoint: /add
                data:
                  task: Completed Task
              - method: POST
                endpoint: /complete/0
            method: POST
            endpoint: /delete_completed/0
            expected_status_code: 302
            expected_redirect: /

          - test: Logout
            setup:
              - method: POST
                endpoint: /login
                data:
                  username: testuser
                  password: testpassword
            method: POST
            endpoint: /logout
            expected_status_code: 302
            expected_redirect: /login
          EOF

  security_scanning:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Bandit
        run: pip install bandit

      - name: Run Security Scan with Bandit
        run: bandit -r app.py

  dast_testing:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Test Environment
        run: |
          echo "Deploying to test environment..."
          # Add deployment commands here
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests python-owasp-zap-v2.4
          
      - name: Get working directory
        run: echo $(PWD)
      - name: Build Image
        run: docker build -t vulnerable-app .
      - name: Install OWASP ZAP
        run: |
          mkdir -p ./zap
          cd ./zap
          wget -N https://objects.githubusercontent.com/github-production-release-asset-2e65be/36817565/53b9443c-94b8-460b-94d5-9615c38d2911?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=releaseassetproduction%2F20250102%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20250102T034423Z&X-Amz-Expires=300&X-Amz-Signature=ef6ffe4c9cb686bd90b56f8e7f7ad5b9ae2c464140a46af320d3faeda27f6c77&X-Amz-SignedHeaders=host&response-content-disposition=attachment%3B%20filename%3DZAP_2.15.0_Linux.tar.gz&response-content-type=application%2Foctet-stream
          tar -zxvf ZAP_2.15.0_Linux.tar.gz
          rm ZAP_2.15.0_Linux.tar.gz
          cd ZAP_2.15.0/plugin
          wget https://github.com/zaproxy/zap-extensions/releases/download/exportreport-v6/exportreport-alpha-6.zap
          echo 'export PATH_ZAP_SH=./zap/ZAP_2.15.0/zap.sh' >> ~/.bashrc
          echo 'export ZAP_PORT=8090' >> ~/.bashrc
          echo 'sh -c "$PATH_ZAP_SH -daemon -host 0.0.0.0 -port $ZAP_PORT -configfile ./zap/ZAP_2.9.0/conf" > /dev/null & ' > start-zap
          echo 'sleep 40' >> start-zap
          echo 'sh -c "$PATH_ZAP_SH -host 0.0.0.0 -port $ZAP_PORT -configfile ./zap/ZAP_2.9.0/conf" > /dev/null & ' > start-gui-zap
          echo 'sleep 40' >> start-gui-zap
          echo 'pkill -f zap' > stop-zap
          chmod +x start-zap
          chmod +x start-gui-zap
          chmod +x stop-zap
          echo $pwd
      - name: Run Docker Container
        run: docker run -d -p 5000:5000 vulnerable-app
      - name: Run ZAP Daemon
        run: ./zap/ZAP_2.9.0/zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.addrs.addr.name=".*" -config api.addrs.addr.regex=true -config api.disablekey=true > /dev/null &
      - name: Sleep for a bit
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'
      - name: Run Test Automation with ZAP
        run: |
          python e2e_zap.py
      - name: "Upload Report"
        uses: actions/upload-artifact@v3
        with:
          name: zap-scan-report
          path: ./tests/zap-report.json
            

  deploy:
    runs-on: ubuntu-latest
    needs: dast_testing
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here
