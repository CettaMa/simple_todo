name: Flask App Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'  # Specify the Python version you need

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest  # Ensure pytest is installed

    - name: Run tests
      run: |
        pytest test/testing.py  # Run tests in the test/ directory

  security_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'  # Specify the Python version you need

    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit

    - name: Run Bandit security scan
      run: |
        bandit -r app.py  # Run Bandit on the app.py file

  dast_scan:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Build Docker image
      run: |
        docker build -t flask-app .

    - name: Run Docker container
      run: |
        docker run -d -p 5000:5000 flask-app
        sleep 5  # Wait for the app to start

    - name: ZAP Scan
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        target: 'http://localhost:5000'
        cmd_options: '-j report_json -z "-config view.locale=id_ID"'
          # Specify the URL of the app
        
    - name: Save ZAP report
      uses: actions/upload-artifact@v4
      with:
        path: report_json.json
      
    - name : Check for high-risk vulnerabilities
      run: |
        high_risk=$(cat report_json.json | jq '.site[].alerts[] | select(.riskcode == "3")')
        if [ -n "$high_risk" ]; then
          echo "High-risk vulnerabilities found"
          exit 1
        else
          echo "No high-risk vulnerabilities found"
        fi
        
  deploy:
    runs-on: ubuntu-latest
    needs: [test, security_scan, dast_scan]

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'  # Specify the Python version you need

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Deploy to Staging
      run: |
        echo "Deploy to staging server"
        # Add your deployment script here





